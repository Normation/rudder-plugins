#####################################################################################
# Copyright 2019 Normation SAS
#####################################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, Version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

# @name Partition check options
# @description Checks if a given mount point options are correct
# @documentation This generic method will check that correct options are applied on a
# given mount point.
# It will never make modification to the node, it is only a `check` method.
#
# It uses the command findmnt to check for mounted options, which should already be available on most Linux
# distributions.
#
# The method will report a `success`:
#
# * if the partition options are correct
# * which means that each options passed in parameters is included in the effective options.
#
# And an `error`:
#
# * If its options do not include the ones passed as parameters
# * if the partition is not mounted
# * or if the command findmnt is not found in /mnt
#
# ####Example:
# If we have a root partition mounted like this:
# ```
# root@server# findmnt -T /
# TARGET SOURCE                             FSTYPE OPTIONS
# /      /dev/mapper/debian--9--64--vg-root ext4   rw,relatime,errors=remount-ro,data=ordered
# ```
# And we apply this generic method with the following parameters:
# 
# * `mount_point` = /
# * `options` = relatime,rw, data=ordered
#
# It will report a success.
#
# If you only want to check that a partition is mounted, please use `partition_check_mounted` instead.
#
# @parameter mount_point Mount point path (absolute mount path on the target node)
# @parameter options Comma separated list of the expected options (ex: rw,relatime)
# 
# @class_prefix mount_point
# @class_parameter mount_point

bundle agent partition_check_options(mount_point, options)
{
  vars:
      "canonified_mount_point" string => canonify("${mount_point}");
      "old_class_prefix"       string => canonify("partition_check_options_${mount_point}");
      "args"                    slist => { "${mount_point}", "${options}" };
      "report_param"           string => join("_", args);
      "full_class_prefix"      string => canonify("partition_check_options_${report_param}");
      "class_prefix"           string => string_head("${full_class_prefix}", "1000");

    findmnt_found::
      "findmnt_output"         string => execresult("/bin/findmnt -nrT ${mount_point}", "noshell");
      "parsing"                int    => parsestringarrayidx("parsed_output", "${findmnt_output}", "\s*#[^\n]*", " ", 4, 99999999999);
      "current_mount_point"    string => "${parsed_output[0][0]}";
      "current_options_string" string => "${parsed_output[0][3]}";


    mounted::
      "current_options"  slist => maplist(regex_replace("$(this)", " ", "", "g"), splitstring("${current_options_string}", ",","999999999"));
      "expected_options" slist => maplist(regex_replace("$(this)", " ", "", "g"), splitstring("${options}", ",", "999999999"));

      "diff_${canonified_mount_point}" slist => difference("expected_options", "current_options" );

  classes:
      "pass3"              expression => "pass2";
      "pass2"              expression => "pass1";
      "pass1"              expression => "any";

      "findmnt_found"      expression => isexecutable("/bin/findmnt");
    findmnt_found.pass2::
      "mounted" expression => strcmp("${current_mount_point}", "${mount_point}");

    mounted.pass2::
      # undefined if diff_${canonified_mount_point} is undefined, meaning that current_options include expected_options
      "not_current_include_expected_${canonified_mount_point}" not => strcmp("", "${diff_${canonified_mount_point}}");

  methods:

    pass3::
      "not_options_${canonified_mount_point}" usebundle => _classes_failure("${old_class_prefix}"),
        ifvarclass => "!findmnt_found|not_current_include_expected_${canonified_mount_point}";
      "not_options_${canonified_mount_point}" usebundle => _classes_failure("${class_prefix}"),
        ifvarclass => "!findmnt_found|not_current_include_expected_${canonified_mount_point}";

    pass3.findmnt_found::
      "options_${canonified_mount_point}" usebundle => _classes_success("${old_class_prefix}"),
        ifvarclass => "!not_current_include_expected_${canonified_mount_point}";
      "options_${canonified_mount_point}" usebundle => _classes_success("${class_prefix}"),
        ifvarclass => "!not_current_include_expected_${canonified_mount_point}";

  methods:
    pass3.!findmnt_found::
      "report" usebundle => _log_v3("Command findmnt not found in /bin, check if mount options of ${mount_point} matches (${options})", "${mount_point}", "${old_class_prefix}", "${class_prefix}", @{args});
    pass3.findmnt_found.mounted::
      "report" usebundle => _log_v3("Check if mount options of ${mount_point} matches (${options}), found (${current_options_string})", "${mount_point}", "${old_class_prefix}", "${class_prefix}", @{args});
    pass3.findmnt_found.!mounted::
      "report" usebundle => _log_v3("Mount point ${mount_point} could not be found. Check if mount options of ${mount_point} matches (${options})", "${mount_point}", "${old_class_prefix}", "${class_prefix}", @{args});
}
