# generated by rudderc
# Generated from json technique
@format = 0
@name = "CIS rhel7 v2.1.1"
@description = "Audit rhel7 configuration based on CIS Benchmark."
@version = "1.0"
@category = "ncf_techniques"
@parameters = []
@benchmark_version = "2.1.1"

resource technique_CIS_rhel7_setup_filesystem()


technique_CIS_rhel7_setup_filesystem state technique() {
  let dollar_char = "$$"

  @component = "Gather packages presence"
  @reporting_logic = "weighted"
  {
    @disable_reporting = true
    package("gdm").present() as gdm_present
    @disable_reporting = true
    package("ntp").present() as ntp_present
    @disable_reporting = true
    package("sshd").present() as sshd_present
    @disable_reporting = true
    package("xinetd").present() as xinetd_present
    @disable_reporting = true
    package("chrony").present() as chrony_present
    @disable_reporting = true
    package("rsyslog").present() as rsyslog_present
    @disable_reporting = true
    package("syslog-ng").present() as syslog_ng_present
  }

  @component = "Initial Setup"
  @reporting_logic = "weighted"
  {
    @component = "Filesystem Configuration"
    @reporting_logic = "weighted"
    {
      @component = "Ensure mounting of cramfs filesystems is disabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.1.1"
      @reporting_logic = "weighted"
      {
        condition("cramfs_not_loaded").from_command("lsmod | grep -q cramfs", "1", "0")
        condition("cramfs_disabled").from_command("modprobe -n -v cramfs | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("cramfs disabled").if_condition("cramfs_not_loaded_false.cramfs_disabled_true")
      }

      @component = "Ensure mounting of freevxfs filesystems is disabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.1.2"
      @reporting_logic = "weighted"
      {
        condition("freevxfs_not_loaded").from_command("lsmod | grep -q freevxfs", "1", "0")
        condition("freevxfs_disabled").from_command("modprobe -n -v freevxfs | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("freevxfs disabled").if_condition("freevxfs_not_loaded_false.freevxfs_disabled_true")
      }

      @component = "Ensure mounting of jffs2 filesystems is disabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.1.3"
      @reporting_logic = "weighted"
      {
        condition("jffs2_not_loaded").from_command("lsmod | grep -q jffs2", "1", "0")
        condition("jffs2_disabled").from_command("modprobe -n -v jffs2 | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("jffs2 disabled").if_condition("jffs2_not_loaded_false.jffs2_disabled_true")
      }

      @component = "Ensure mounting of hfs filesystems is disabled "
      @reporting_logic = "weighted"
      {
        condition("hfs_not_loaded").from_command("lsmod | grep -q hfs", "1", "0")
        condition("hfs_disabled").from_command("modprobe -n -v hfs | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("hfs disabled").if_condition("hfs_not_loaded_false.hfs_disabled_true")
      }

      @component = "Ensure mounting of hfsplus filesystems is disabled "
      @reporting_logic = "weighted"
      {
        condition("hfsplus_not_loaded").from_command("lsmod | grep -q hfsplus", "1", "0")
        condition("hfsplus_disabled").from_command("modprobe -n -v hfsplus | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("hfsplus disabled").if_condition("hfsplus_not_loaded_false.hfsplus_disabled_true")
      }

      @component = "Ensure mounting of squashfs filesystems is disabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.1.6"
      @reporting_logic = "weighted"
      {
        condition("squashfs_not_loaded").from_command("lsmod | grep -q squashfs", "1", "0")
        condition("squashfs_disabled").from_command("modprobe -n -v squashfs | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("squashfs disabled").if_condition("squashfs_not_loaded_false.squashfs_disabled_true")
      }

      @component = "Ensure mounting of udf filesystems is disabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.1.7"
      @reporting_logic = "weighted"
      {
        condition("udf_not_loaded").from_command("lsmod | grep -q udf", "1", "0")
        condition("udf_disabled").from_command("modprobe -n -v udf | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("udf disabled").if_condition("udf_not_loaded_false.udf_disabled_true")
      }

      @component = "Ensure mounting of FAT filesystems is disabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.1.8"
      @reporting_logic = "weighted"
      {
        condition("vfat_not_loaded").from_command("lsmod | grep -q vfat", "1", "0")
        condition("vfat_disabled").from_command("modprobe -n -v vfat | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("vfat disabled").if_condition("vfat_not_loaded_false.vfat_disabled_true")
      }

      @component = "Ensure separate partition exists for /tmp"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.1.2"
      @reporting_logic = "weighted"
      {
        partition("/tmp").check_mounted()
      }

      @component = "Ensure nodev option set on /tmp partition"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.3"
      @reporting_logic = "weighted"
      {
        partition("/tmp").check_options("nodev")
      }

      @component = "Ensure nosuid option set on /tmp partition"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.4"
      @reporting_logic = "weighted"
      {
        partition("/tmp").check_options("nosuid")
      }

      @component = "Ensure noexec option set on /tmp partition"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.5"
      @reporting_logic = "weighted"
      {
        partition("/tmp").check_options("noexec")
      }

      @component = "Ensure separate partition exists for /var"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.1.6"
      @reporting_logic = "weighted"
      {
        partition("/var").check_mounted()
      }

      @component = "Ensure separate partition exists for /var/tmp"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.1.7"
      @reporting_logic = "weighted"
      {
        partition("/var/tmp").check_mounted()
      }

      @component = "Ensure nodev option set on /var/tmp partition"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.8"
      @reporting_logic = "weighted"
      {
        partition("/var/tmp").check_options("nodev")
      }

      @component = "Ensure nosuid option set on /var/tmp partition"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.9"
      @reporting_logic = "weighted"
      {
        partition("/var/tmp").check_options("nosuid")
      }

      @component = "Ensure noexec option set on /var/tmp partition"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.10"
      @reporting_logic = "weighted"
      {
        partition("/var/tmp").check_options("noexec")
      }

      @component = "Ensure separate partition exists for /var/log"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.1.11"
      @reporting_logic = "weighted"
      {
        partition("/var/log").check_mounted()
      }

      @component = "Ensure separate partition exists for /var/log/audit"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.1.12"
      @reporting_logic = "weighted"
      {
        partition("/var/log/audit").check_mounted()
      }

      @component = "Ensure separate partition exists for /home"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.1.13"
      @reporting_logic = "weighted"
      {
        partition("/home").check_mounted()
      }

      @component = "Ensure noexec option set on /home partition"
      @reporting_logic = "weighted"
      {
        partition("/home").check_options("nodev")
      }

      @component = "Ensure nodev option set on /dev/shm partition"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.15"
      @reporting_logic = "weighted"
      {
        partition("/dev/shm").check_options("nodev")
      }

      @component = "Ensure nosuid option set on /dev/shm partition"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.16"
      @reporting_logic = "weighted"
      {
        partition("/dev/shm").check_options("nosuid")
      }

      @component = "Ensure noexec option set on /dev/shm partition"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.17"
      @reporting_logic = "weighted"
      {
        partition("/dev/shm").check_options("noexec")
      }

      @component = "Ensure nodev option set on removable media partitions"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure nosuid option set on removable media partitions"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure noexec option set on removable media partitions"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure sticky bit is set on all world-writable directories"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.21"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "missing_sticky_bit").string_from_command("""df --local -P | awk '{if (NR!=1) print ${dollar_char}6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \)""")
        condition("sticky_bit_correct").from_variable_match("cis_rhel7.missing_sticky_bit", """\s+""")
        report("Ensure sticky bit is set on all world-writable directories").if_condition("sticky_bit_correct_true")
      }

      @component = "Disable Automounting"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.1.22"
      @reporting_logic = "weighted"
      {
        service("autofs").disabled()
        service("autofs").stopped()
      }
    }

    @component = "Configure Software Updates"
    @reporting_logic = "weighted"
    {
      @component = "Ensure package manager repositories are configured"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure gpgcheck is globally activated"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.2.2"
      @reporting_logic = "weighted"
      {
        file("/etc/yum.conf").key_value_present_in_ini_section("main", "gpgcheck", "1")
        # The grep does return 1 if everything is correct. 0 otherwise.
        condition("gpgcheck_enabled_everywhere").from_command("""grep -RE ^gpgcheck=.* /etc/yum.repos.d/ | grep -vqE ^.*:gpgcheck=1${dollar_char}""", "1", "0")
        report("Ensure gpgcheck is globally activated").if_condition("gpgcheck_enabled_everywhere_true")
      }

      @component = "Ensure GPG keys are configured"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure Red Hat Network or Subscription Manager connection is configured"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Disable the rhnsd Daemon"
      @reporting_logic = "weighted"
      {
        # TODO
      }
    }

    @component = "Filesystem Integrity Checking"
    @reporting_logic = "weighted"
    {
      @component = "Ensure AIDE is installed"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.3.1"
      @reporting_logic = "weighted"
      {
        package("aide").present()
      }

      @component = "Ensure filesystem integrity is regularly checked"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.3.2"
      @reporting_logic = "weighted"
      {
        condition("aide_scheduled").from_command("grep -rq aide /etc/cron.* /etc/crontab", "0", "1")
        report("Ensure gpgcheck is globlly activated").if_condition("aide_scheduled_true")
      }
    }

    @component = "Secure Boot Settings"
    @reporting_logic = "weighted"
    {
      @component = "Ensure permissions on bootloader config are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.4.1"
      @reporting_logic = "weighted"
      {
        permissions("/boot/grub2/grub.cfg").type_recursion("600", "root", "root", "all", "0", "all", "0")
      }

      @component = "Ensure bootloader password is set"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.4.2"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure authentication required for single user mode"
      @reporting_logic = "weighted"
      {
        # TODO
      }
    }

    @component = "Additional Process Hardening"
    @reporting_logic = "weighted"
    {
      @component = "Ensure core dumps are restricted"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.5.1"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "core_dump_restriction").string_from_command("grep 'hard core' /etc/security/limits.conf /etc/security/limits.d/*")
        condition("core_dump_restricted").from_variable_match("cis_rhel7.core_dump_restriction", """\*\s+hard\s+core\s+0""")
        report("Ensure core dumps are restricted").if_condition("core_dump_restricted_true")

        variable("cis_rhel7", "setuid_core_dump_restriction").string_from_command("sysctl fs.suid_dumpable")
        condition("setuid_core_dump_restricted").from_variable_match("cis_rhel7.setuid_core_dump_restriction", """fs.suid_dumpable\s+=\s+0""")
        report("Ensure setuid programs can not dump core").if_condition("setuid_core_dump_restricted_true")
      }

      @component = "Ensure XD/NX support is enabled"
      @reporting_logic = "weighted"
      {
        condition("xd_nx_support_enabled").from_command("dmesg | grep -E 'NX|XD' | grep -q ' active'", "0", "1")
        report("Ensure core dumps are restricted").if_condition("xd_nx_support_enabled_true")
      }

      @component = "Ensure address space layout randomization (ASLR) is enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.5.3"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "aslr").string_from_command("sysctl kernel.randomize_va_space")
        condition("aslr_enabled").from_variable_match("cis_rhel7.aslr", """kernel.randomize_va_space\s+=\s+2""")
        report("Ensure address space layout randomization (ASLR) is enabled").if_condition("aslr_enabled_true")
      }

      @component = "Ensure prelink is disabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.5.4"
      @reporting_logic = "weighted"
      {
        package("prelink").present()
      }
    }

    @component = "Configure SELinux"
    @reporting_logic = "weighted"
    {
      @component = "Ensure SELinux is not disabled in bootloader configuration"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.6.1.1"
      @reporting_logic = "weighted"
      {
        condition("selinux_not_disabled_by_grub").from_command("""grep -qE '(selinux|enforcing)\s*=\s*0\s*)' /etc/default/grub""", "0", "1")
        report("Ensure core dumps are restricted").if_condition("xd_nx_support_enabled_true")
      }

      @component = "Ensure the SELinux state is enforcing"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.6.1.2"
      @reporting_logic = "weighted"
      {
        file("/etc/selinux/config").key_value_present_option("SELINUX", "enforcing", "=", "lax")
      }

      @component = "Ensure SELinux policy is configured"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.6.1.3"
      @reporting_logic = "weighted"
      {
        # Rudder does not have a key_value_in_list method
        condition("selinuxtype_targeted_or_mls").from_command("""grep -qE 'SELINUXTYPE\s*=\s*(targeted|mls)' /etc/selinux/config""", "0", "1")
        report("Ensure SELinux policy is configured").if_condition("selinuxtype_targeted_or_mls_true")
      }

      @component = "Ensure SETroubleshoot is not installed"
      @component = "server_2"
      @component = "1.6.1.4"
      @reporting_logic = "weighted"
      {
        package("setroubleshoot").absent("", "", "")
      }

      @component = "Ensure the MCS Translation Service (mcstrans) is not installed"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.6.1.5"
      @reporting_logic = "weighted"
      {
        package("mcstrans").absent("", "", "")
      }

      @component = "Ensure no unconfined daemons exist"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.6.1.6"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "unconfined_daemons").string_from_command("""ps -eZ | egrep 'initrc' | egrep -vw 'tr|ps|egrep|bash|awk' | tr ':' ' ' | awk '{ print ${dollar_char}NF }'""")
        condition("unconfined_daemons_found").from_variable_match("cis_rhel7.unconfined_daemons", ".+")
        report("Ensure no unconfined daemons exist").if_condition("unconfined_daemons_found_false")
      }

      @component = "Ensure SELinux is installed"
      @component = "workstation_2"
      @component = "server_2"
      @component = "1.6.2"
      @reporting_logic = "weighted"
      {
        package("libselinux").present()
      }
    }

    @component = "Command Line Warning Banners"
    @reporting_logic = "weighted"
    {
      @component = "Ensure message of the day is configured properly"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.7.1.1"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure local login warning banner is configured properly"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure remote login warning banner is configured properly"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure permissions on /etc/motd are configured"
      @reporting_logic = "weighted"
      {
        permissions("/etc/motd").type_recursion("644", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/issue are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.7.1.5"
      @reporting_logic = "weighted"
      {
        permissions("/etc/issue").type_recursion("644", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/issue.net are configured"
      @reporting_logic = "weighted"
      {
        permissions("/etc/issue.net").type_recursion("644", "root", "root", "all", "0")
      }

      if gdm_present_ok =>
      @component = "Ensure GDM login banner is configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "1.7.2"
      @reporting_logic = "weighted"
      {
         file("/etc/dconf/profile/gdm").key_value_present_option("user-db", "user", ":", "strict")
         file("/etc/dconf/profile/gdm").key_value_present_option("system-db", "gdm", ":", "strict")
         file("/etc/dconf/profile/gdm").key_value_present_option("file-db", "/usr/share/gdm/greeter-dconf-defaults", ":", "strict")

         file("/etc/dconf/db/gdm.d/01-banner-message").key_value_present_in_ini_section("org/gnome/login-screen", "banner-message-enable", "true")
         # TODO
         file("/etc/dconf/db/gdm.d/01-banner-message").key_value_present_in_ini_section("org/gnome/login-screen", "banner-message-text", "<my_banner_messsage> TODO")
      }
    }

    @component = "Ensure updates, patches, and additional security software are installed"
    @reporting_logic = "weighted"
    {
      # TODO
    }
  }

  @component = "Services"
  @reporting_logic = "weighted"
  {
    @component = "inetd Services"
    @reporting_logic = "weighted"
    {
      if xinetd_present_ok =>
      @component = "Ensure chargen services are not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.1.1"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      if xinetd_present_ok =>
      @component = "Ensure daytime services are not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.1.2"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      if xinetd_present_ok =>
      @component = "Ensure discard services are not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.1.3"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      if xinetd_present_ok =>
      @component = "Ensure echo services are not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.1.4"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      if xinetd_present_ok =>
      @component = "Ensure time services are not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.1.5"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      if xinetd_present_ok =>
      @component = "Ensure NIS Server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.16"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      if xinetd_present_ok =>
      @component = "Ensure xinetd is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.1.7"
      @reporting_logic = "weighted"
      {
        service("xinetd").stopped()
        service("xinetd").disabled()
      }
    }
    @component = "Special Purpose Services"
    @reporting_logic = "weighted"
    {
      @component = "Time Synchronization"
      @reporting_logic = "weighted"
      {
        @component = "Ensure time synchronization is in use"
        @reporting_logic = "weighted"
        {
          report("Ensure time synchronization is in use").if_condition("ntp_present_ok|chrony_present_ok")
        }

        if ntp_present_ok =>
        @component = "Ensure ntp is configured"
        @component = "workstation_1"
        @component = "server_1"
        @component = "2.2.1.2"
        @reporting_logic = "weighted"
        {
          # TODO
        }

        if chrony_present_ok =>
        @component = "Ensure chrony is configured"
        @component = "workstation_1"
        @component = "server_1"
        @component = "2.2.1.3"
        @reporting_logic = "weighted"
        {
          # TODO
        }
      }

      @component = "Ensure X Window System is not installed"
      @component = "server_1"
      @component = "2.2.2"
      @reporting_logic = "weighted"
      {
        package("xorg-x11").absent()
      }

      @component = "Ensure Avahi Server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.3"
      @reporting_logic = "weighted"
      {
        service("avahi-daemon").stopped()
        service("avahi-daemon").disabled()
      }

      @component = "Ensure CUPS is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.4"
      @reporting_logic = "weighted"
      {
        service("cups").stopped()
        service("cups").disabled()
      }

      @component = "Ensure DHCP Server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.5"
      @reporting_logic = "weighted"
      {
        service("dhcpd").stopped()
        service("dhcpd").disabled()
      }

      @component = "Ensure LDAP server is not enabled "
      @reporting_logic = "weighted"
      {
        service("slapd").stopped()
        service("slapd").disabled()
      }

      @component = "Ensure NFS and RPC are not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.7"
      @reporting_logic = "weighted"
      {
        service("nfs").stopped()
        service("nfs").disabled()

        service("rpcbind").stopped()
        service("rpcbind").disabled()
      }

      @component = "Ensure DNS Server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.8"
      @reporting_logic = "weighted"
      {
        service("named").stopped()
        service("named").disabled()
      }

      @component = "Ensure FTP Server is not enabled "
      @reporting_logic = "weighted"
      {
        service("vsftpd").stopped()
        service("vsftpd").disabled()
      }

      @component = "Ensure HTTP server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.10"
      @reporting_logic = "weighted"
      {
        service("httpd").stopped()
        service("httpd").disabled()
      }

      @component = "Ensure IMAP and POP3 server is not enabled "
      @reporting_logic = "weighted"
      {
        service("dovecot").stopped()
        service("dovecot").disabled()
      }

      @component = "Ensure Samba is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.12"
      @reporting_logic = "weighted"
      {
        service("smb").stopped()
        service("smb").disabled()
      }

      @component = "Ensure HTTP Proxy Server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.13"
      @reporting_logic = "weighted"
      {
        service("squid").stopped()
        service("squid").disabled()
      }

      @component = "Ensure SNMP Server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.14"
      @reporting_logic = "weighted"
      {
        service("snmpd").stopped()
        service("snmpd").disabled()
      }

      @component = "Ensure mail transfer agent is configured for local-only mode"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.15"
      @reporting_logic = "weighted"
      {
        # TODO
        file("/etc/postfix/main.cf").key_value_present_option("inet_interfaces", "localhost", "=", "lax")
      }

      @component = "Ensure NIS Server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.16"
      @reporting_logic = "weighted"
      {
        service("ypserv").stopped()
        service("ypserv").disabled()
      }

      @component = "Ensure rsh server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.17"
      @reporting_logic = "weighted"
      {
        service("rsh.socket").stopped()
        service("rsh.socket").disabled()

        service("rlogin.socket").stopped()
        service("rlogin.socket").disabled()

        service("rexec.socket").stopped()
        service("rexec.socket").disabled()
      }

      @component = "Ensure talk server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.18"
      @reporting_logic = "weighted"
      {
        service("ntalk").stopped()
        service("ntalk").disabled()
      }

      @component = "Ensure telnet server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.19"
      @reporting_logic = "weighted"
      {
        service("telnet.socket").stopped()
        service("telnet.socket").disabled()
      }

      @component = "Ensure tftp server is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.20"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.1.6"
      @reporting_logic = "weighted"
      {
        service("tftp.socket").stopped()
        service("tftp.socket").disabled()
      }

      @component = "Ensure rsync service is not enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.2.21"
      @reporting_logic = "weighted"
      {
        service("rsyncd").stopped()
        service("rsyncd").disabled()
      }
    }

    @component = "Service Clients"
    @reporting_logic = "weighted"
    {
      @component = "Ensure NIS Client is not installed"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.3.1"
      @reporting_logic = "weighted"
      {
        package("ypbind").absent()
      }

      @component = "Ensure rsh client is not installed"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.3.2"
      @reporting_logic = "weighted"
      {
        package("rsh").absent()
      }

      @component = "Ensure talk client is not installed"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.3.3"
      @reporting_logic = "weighted"
      {
        package("talk").absent()
      }

      @component = "Ensure telnet client is not installed"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.3.4"
      @reporting_logic = "weighted"
      {
        package("telnet").absent()
      }

      @component = "Ensure LDAP client is not installed"
      @component = "workstation_1"
      @component = "server_1"
      @component = "2.3.5"
      @reporting_logic = "weighted"
      {
        package("openldap-clients").absent()
      }
    }
  }

  @component = "Network Configuration"
  @reporting_logic = "weighted"
  {
    @component = "Network Parameters (Host Only)"
    @reporting_logic = "weighted"
    {
      @component = "Ensure IP forwarding is disabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.1.1"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "disable_ipv4_forward").string_from_command("sysctl net.ipv4.ip_forward")
        condition("ipv4_forward_disabled").from_variable_match("cis_rhel7.disable_ipv4_forward", """net.ipv4.ip_forward\s+=\s+0""")
        report("Ensure IP forwarding is disabled").if_condition("ipv4_forward_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.ip_forward", "0", " = ", "strict")
      }

      @component = "Ensure packet redirect sending is disabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.1.2"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv4_conf_all_send_redirects").string_from_command("sysctl net.ipv4.conf.all.send_redirects")
        condition("net_ipv4_conf_all_send_redirects_disabled").from_variable_match("cis_rhel7.net_ipv4_conf_all_send_redirects", """net.ipv4.conf.all.send_redirects\s+=\s+0""")
        report("Ensure packet redirect sending is disabled").if_condition("net_ipv4_conf_all_send_redirects_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.all.send_redirects", "0", " = ", "strict")


        variable("cis_rhel7", "net_ipv4_conf_default_send_redirects").string_from_command("sysctl net.ipv4.conf.default.send_redirects")
        condition("net_ipv4_conf_default_send_redirects_disabled").from_variable_match("cis_rhel7.net_ipv4_conf_default_send_redirects", """net.ipv4.conf.default.send_redirects\s+=\s+0""")
        report("Ensure packet redirect sending is disabled").if_condition("net_ipv4_conf_default_send_redirects_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.default.send_redirects", "0", " = ", "strict")
      }
    }

    @component = "Network Parameters (Host and Router)"
    @reporting_logic = "weighted"
    {
      @component = "Ensure source routed packets are not accepted"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.2.1"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv4_conf_all_accept_source_route").string_from_command("sysctl net.ipv4.conf.all.accept_source_route")
        condition("net_ipv4_conf_all_accept_source_route_disabled").from_variable_match("cis_rhel7.net.ipv4.conf.all.accept_source_route", """net.ipv4.conf.all.accept_source_route\s+=\s+0""")
        report("Ensure source routed packets are not accepted").if_condition("net_ipv4_conf_all_accept_source_route_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.all.accept_source_route", "0", " = ", "strict")


        variable("cis_rhel7", "net_ipv4_conf_default_accept_source_route").string_from_command("sysctl net.ipv4.conf.default.accept_source_route")
        condition("net_ipv4_conf_default_accept_source_route_disabled").from_variable_match("cis_rhel7.net.ipv4.conf.default.accept_source_route", """net.ipv4.conf.default.accept_source_route\s+=\s+0""")
        report("Ensure source routed packets are not accepted").if_condition("net_ipv4_conf_default_accept_source_route_disabled")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.default.accept_source", "0", " = ", "strict")
      }

      @component = "Ensure source routed packets are not accepted"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.2.1"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv4_conf_all_accept_redirects").string_from_command("sysctl net.ipv4.conf.all.accept_redirects")
        condition("net_ipv4_conf_all_accept_redirects_disabled").from_variable_match("cis_rhel7.net.ipv4.conf.all.accept_redirects", """net.ipv4.conf.all.accept_redirects\s+=\s+0""")
        report("Ensure source routed packets are not accepted").if_condition("net_ipv4_conf_all_accept_redirects_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.all.accept_redirects", "0", " = ", "strict")


        variable("cis_rhel7", "net_ipv4_conf_default_accept_redirects").string_from_command("sysctl net.ipv4.conf.default.accept_redirects")
        condition("net_ipv4_conf_default_accept_redirects_disabled").from_variable_match("cis_rhel7.net.ipv4.conf.default.accept_redirects", """net.ipv4.conf.default.accept_redirects\s+=\s+0""")
        report("Ensure source routed packets are not accepted").if_condition("net_ipv4_conf_default_accept_redirects_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.default.accept_redirects", "0", " = ", "strict")
      }

      @component = "Ensure secure ICMP redirects are not accepted"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.2.3"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv4_conf_all_secure_redirects").string_from_command("sysctl net.ipv4.conf.all.secure_redirects")
        condition("net_ipv4_conf_all_secure_redirects_disabled").from_variable_match("cis_rhel7.net.ipv4.conf.all.secure_redirects", """net.ipv4.conf.all.secure_redirects\s+=\s+0""")
        report("Ensure secure ICMP redirects are not accepted").if_condition("net_ipv4_conf_all_secure_redirects_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.all.secure_redirects", "0", " = ", "strict")

        variable("cis_rhel7", "net_ipv4_conf_default_secure_redirects").string_from_command("sysctl net.ipv4.conf.default.secure_redirects")
        condition("net_ipv4_conf_default_secure_redirects_disabled").from_variable_match("cis_rhel7.net.ipv4.conf.default.secure_redirects", """net.ipv4.conf.default.secure_redirects\s+=\s+0""")
        report("Ensure secure ICMP redirects are not accepted").if_condition("net_ipv4_conf_default_secure_redirects_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.default.secure_redirects", "0", " = ", "strict")
      }

      @component = "Ensure suspicious packets are logged"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.2.4"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv4_conf_all_log_martians").string_from_command("sysctl net.ipv4.conf.all.log_martians")
        condition("net_ipv4_conf_all_log_martians_logged").from_variable_match("cis_rhel7.net.ipv4.conf.all.log_martians", """net.ipv4.conf.all.log_martians\s+=\s+1""")
        report("Ensure suspicious packets are logged").if_condition("net_ipv4_conf_all_log_martians_logged_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.all.log_martians", "1", " = ", "strict")


        variable("cis_rhel7", "net_ipv4_conf_default_log_martians").string_from_command("sysctl net.ipv4.conf.default.log_martians")
        condition("net_ipv4_conf_default_log_martians_logged").from_variable_match("cis_rhel7.net.ipv4.conf.default.log_martians", """net.ipv4.conf.default.log_martians\s+=\s+1""")
        report("Ensure suspicious packets are logged").if_condition("net_ipv4_conf_default_log_martians_logged_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.default.log_martians", "1", " = ", "strict")
      }

      @component = "Ensure broadcast ICMP requests are ignored"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.2.5"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv4_icmp_echo_ignore_broadcasts").string_from_command("sysctl net.ipv4.icmp_echo_ignore_broadcasts")
        condition("net_ipv4_icmp_echo_ignore_broadcasts_enabled").from_variable_match("cis_rhel7.net.ipv4.icmp_echo_ignore_broadcasts", """net.ipv4.icmp_echo_ignore_broadcasts\s+=\s+1""")
        report("Ensure broadcast ICMP requests are ignored").if_condition("net_ipv4_icmp_echo_ignore_broadcasts_enabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.icmp_echo_ignore_broadcasts", "1", " = ", "strict")
      }

      @component = "Ensure bogus ICMP responses are ignored"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.2.6"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv4_icmp_ignore_bogus_error_responses").string_from_command("sysctl net.ipv4.icmp_ignore_bogus_error_responses")
        condition("net_ipv4_icmp_ignore_bogus_error_responses_enabled").from_variable_match("cis_rhel7.net.ipv4.icmp_ignore_bogus_error_responses", """net.ipv4.icmp_ignore_bogus_error_responses\s+=\s+1""")
        report("Ensure bogus ICMP responses are ignored").if_condition("net_ipv4_icmp_ignore_bogus_error_responses_enabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.icmp_ignore_bogus_error_responses", "1", " = ", "strict")
      }

      @component = "Ensure Reverse Path Filtering is enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.2.7"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv4_conf_all_rp_filter").string_from_command("sysctl net.ipv4.conf.all.rp_filter")
        condition("net_ipv4_conf_all_rp_filter_enabled").from_variable_match("cis_rhel7.net.ipv4.conf.all.rp_filter", """net.ipv4.conf.all.rp_filter\s+=\s+1""")
        report("Ensure Reverse Path Filtering is enabled").if_condition("net_ipv4_conf_all_rp_filter_enabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.all.rp_filter", "1", " = ", "strict")


        variable("cis_rhel7", "net_ipv4_conf_default_rp_filter").string_from_command("sysctl net.ipv4.conf.default.rp_filter")
        condition("net_ipv4_conf_default_rp_filter_enabled").from_variable_match("cis_rhel7.net.ipv4.conf.default.rp_filter", """net.ipv4.conf.default.rp_filter\s+=\s+1""")
        report("Ensure Reverse Path Filtering is enabled").if_condition("net_ipv4_conf_default_rp_filter_enabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.conf.default.rp_filter", "1", " = ", "strict")
      }

      @component = "Ensure TCP SYN Cookies is enabled"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.2.8"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv4_tcp_syncookies").string_from_command("sysctl net.ipv4.tcp_syncookies")
        condition("net_ipv4_tcp_syncookies_enabled").from_variable_match("cis_rhel7.net.ipv4.tcp_syncookies", """net.ipv4.tcp_syncookies\s+=\s+1""")
        report("Ensure TCP SYN Cookies is enabled").if_condition("net_ipv4_tcp_syncookies_enabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv4.tcp_syncookies", "1", " = ", "strict")
      }
    }

    @component = "IPv6"
    @reporting_logic = "weighted"
    {
      @component = "Ensure IPv6 router advertisements are not accepted"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.3.1"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv6_conf_all_accept_ra").string_from_command("sysctl net.ipv6.conf.all.accept_ra")
        condition("net_ipv6_conf_all_accept_ra_disabled").from_variable_match("cis_rhel7.net.ipv6.conf.all.accept_ra", """net.ipv6.conf.all.accept_ra\s+=\s+1""")
        report("Ensure IPv6 router advertisements are not accepted").if_condition("net_ipv6_conf_all_accept_ra_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv6.conf.all.accept_ra", "1", " = ", "strict")


        variable("cis_rhel7", "net_ipv6_conf_default_accept_ra").string_from_command("sysctl net.ipv6.conf.default.accept_ra")
        condition("net_ipv6_conf_default_accept_ra_disabled").from_variable_match("cis_rhel7.net.ipv6.conf.default.accept_ra", """net.ipv6.conf.default.accept_ra\s+=\s+1""")
        report("Ensure IPv6 router advertisements are not accepted").if_condition("net_ipv6_conf_default_accept_ra_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv6.conf.default.accept_ra", "1", " = ", "strict")
      }

      @component = "Ensure IPv6 redirects are not accepted"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.3.2"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "net_ipv6_conf_all_accept_redirects").string_from_command("sysctl net.ipv6.conf.all.accept_redirects")
        condition("net_ipv6_conf_all_accept_redirects_disabled").from_variable_match("cis_rhel7.net.ipv6.conf.all.accept_redirects", """net.ipv6.conf.all.accept_redirects\s+=\s+0""")
        report("Ensure IPv6 redirects are not accepted").if_condition("net_ipv6_conf_all_accept_redirects_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv6.conf.all.accept_redirects", "0", " = ", "strict")


        variable("cis_rhel7", "net_ipv6_conf_default_accept_redirects").string_from_command("sysctl net.ipv6.conf.default.accept_redirects")
        condition("net_ipv6_conf_default_accept_redirects_disabled").from_variable_match("cis_rhel7.net.ipv6.conf.default.accept_redirects", """net.ipv6.conf.default.accept_redirects\s+=\s+0""")
        report("Ensure IPv6 redirects are not accepted").if_condition("net_ipv6_conf_default_accept_redirects_disabled_true")

        file("/etc/sysctl.conf").key_value_present_option("net.ipv6.conf.default.accept_redirects", "0", " = ", "strict")
      }

      @component = "Ensure IPv6 is disabled"
      @reporting_logic = "weighted"
      {
        # TODO
      }
    }

    @component = "TCP Wrappers"
    @reporting_logic = "weighted"
    {
      @component = "Ensure TCP Wrappers is installed "
      @reporting_logic = "weighted"
      {
        package("tcp_wrappers").present()
        package("tcp_wrappers-libs").present()
      }

      @component = "Ensure /etc/hosts.allow is configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.4.2"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure /etc/hosts.deny is configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.4.3"
      @reporting_logic = "weighted"
      {
        file("/etc/hosts.deny").content("ALL: ALL", "true")
      }

      @component = "Ensure permissions on /etc/hosts.allow are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.4.4"
      @reporting_logic = "weighted"
      {
        permissions("/etc/hosts.allow").type_recursion("644", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/hosts.deny are 644"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.4.5"
      @reporting_logic = "weighted"
      {
        permissions("/etc/hosts.deny").type_recursion("644", "root", "root", "all", "0")
      }
    }

    @component = "Uncommon Network Protocols"
    @reporting_logic = "weighted"
    {
      @component = "Ensure DCCP is disabled"
      @reporting_logic = "weighted"
      {
        condition("dccp_not_loaded").from_command("lsmod | grep -q dccp", "1", "0")
        condition("dccp_disabled").from_command("modprobe -n -v dccp | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("dccp disabled").if_condition("dccp_not_loaded_false.dccp_disabled_true")
      }

      @component = "Ensure SCTP is disabled"
      @reporting_logic = "weighted"
      {
        condition("sctp_not_loaded").from_command("lsmod | grep -q sctp", "1", "0")
        condition("sctp_disabled").from_command("modprobe -n -v sctp | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("sctp disabled").if_condition("sctp_not_loaded_false.sctp_disabled_true")
      }

      @component = "Ensure RDS is disabled"
      @reporting_logic = "weighted"
      {
        condition("rds_not_loaded").from_command("lsmod | grep -q rds", "1", "0")
        condition("rds_disabled").from_command("modprobe -n -v rds | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("rds disabled").if_condition("rds_not_loaded_false.rds_disabled_true")
      }

      @component = "Ensure TIPC is disabled"
      @reporting_logic = "weighted"
      {
        condition("tipc_not_loaded").from_command("lsmod | grep -q tipc", "1", "0")
        condition("tipc_disabled").from_command("modprobe -n -v tipc | grep -qE 'install (/bin/true|/bin/false)'", "0", "1")
        report("tipc disabled").if_condition("tipc_not_loaded_false.tipc_disabled_true")
      }
    }

    @component = "Firewall Configuration"
    @reporting_logic = "weighted"
    {
      @component = "Ensure iptables is installed"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.6.1"
      @reporting_logic = "weighted"
      {
        package("iptables").present()
      }

      @component = "Ensure default deny firewall policy"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.6.2"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure loopback traffic is configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.6.3"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure outbound and established connections are configured"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure firewall rules exist for all open ports"
      @component = "workstation_1"
      @component = "server_1"
      @component = "3.6.5"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure wireless interfaces are disabled"
      @reporting_logic = "weighted"
      {
        # TODO
      }
    }
  }

  @component = "Logging and Auditing"
  @reporting_logic = "weighted"
  {
    @component = "Configure System Accounting (auditd)"
    @reporting_logic = "weighted"
    {
      @component = "Ensure audit log storage size is configured"
      @reporting_logic = "weighted"
      {
        # TODO, define the max log file value
        file("/etc/audit/auditd.conf").key_value_present_option("max_log_file", "", "=", "lax")
      }

      @component = "Ensure system is disabled when audit logs are full"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.1.2"
      @reporting_logic = "weighted"
      {
        file("/etc/audit/auditd.conf").key_value_present_option("space_left_action", "email", "=", "lax")
        file("/etc/audit/auditd.conf").key_value_present_option("action_mail_acct", "root", "=", "lax")
        file("/etc/audit/auditd.conf").key_value_present_option("admin_space_left_action", "halt", "=", "lax")
      }

      @component = "Ensure audit logs are not automatically deleted"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.1.3"
      @reporting_logic = "weighted"
      {
        file("/etc/audit/auditd.conf").key_value_present_option("max_log_file_action", "keep_logs", "=", "lax")
      }

      @component = "Ensure auditd service is enabled"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.2"
      @reporting_logic = "weighted"
      {
        service("auditd").disabled()
        service("auditd").stopped()
      }

      @component = "Ensure auditing for processes that start prior to auditd is enabled"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.3"
      @reporting_logic = "weighted"
      {
        file("/boot/grub2/grub.cfg").key_value_parameter_present_in_list("GRUB_CMDLINE_LINUX", "=", "audit=1", ",", "\"", "\"")
      }

      @component = "Ensure events that modify date and time information are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.4"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure events that modify user/group information are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.5"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure events that modify the system's network environment are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.6"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure events that modify the system's Mandatory Access Controls are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.7"
      @reporting_logic = "weighted"
      {
        file("/etc/audit/audit.rules").content("-w /etc/selinux/ -p wa -k MAC-policy", "false")
      }

      @component = "Ensure login and logout events are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.8"
      @reporting_logic = "weighted"
      {
        file("/etc/audit/audit.rules").content("-w /var/log/lastlog -p wa -k logins", "false")
        file("/etc/audit/audit.rules").content("-w /var/run/faillock/ -p wa -k logins", "false")
      }

      @component = "Ensure session initiation information is collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.9"
      @reporting_logic = "weighted"
      {
        file("/etc/audit/audit.rules").content("-w /var/run/utmp -p wa -k session", "false")
        file("/etc/audit/audit.rules").content("-w /var/log/wtmp -p wa -k session", "false")
        file("/etc/audit/audit.rules").content("-w /var/log/btmp -p wa -k session", "false")
      }

      @component = "Ensure discretionary access control permission modification events are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.10"
      @reporting_logic = "weighted"
      {
        if x86_64 =>
        @component = "x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b64 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b64 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod", "false")
        }

        if i386|i486|i586|i686 =>
        @component = "non x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S chmod -S fchmod -S fchmodat -F auid>=1000 -F auid!=4294967295 -k perm_mod", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S chown -S fchown -S fchownat -S lchown -F auid>=1000 -F auid!=4294967295 -k perm_mod", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S setxattr -S lsetxattr -S fsetxattr -S removexattr -S lremovexattr -S fremovexattr -F auid>=1000 -F auid!=4294967295 -k perm_mod", "false")
        }
      }

      @component = "Ensure unsuccessful unauthorized file access attempts are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.11"
      @reporting_logic = "weighted"
      {
        if x86_64 =>
        @component = "x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000  -F auid!=4294967295 -k access", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b64 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access", "false")
        }

        if i386|i486|i586|i686 =>
        @component = "non x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EACCES -F auid>=1000 -F auid!=4294967295 -k access", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S creat -S open -S openat -S truncate -S ftruncate -F exit=-EPERM -F auid>=1000 -F auid!=4294967295 -k access", "false")
        }
      }

      @component = "Ensure use of privileged commands is collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.12"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure successful file system mounts are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.13"
      @reporting_logic = "weighted"
      {
        if x86_64 =>
        @component = "x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts", "false")
        }

        if i386|i486|i586|i686 =>
        @component = "non x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts", "false")
        }
      }

      @component = "Ensure file deletion events by users are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.14"
      @reporting_logic = "weighted"
      {
        if x86_64 =>
        @component = "x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete", "false")
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete", "false")
        }

        if i386|i486|i586|i686 =>
        @component = "non x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete", "false")
        }
      }

      @component = "Ensure changes to system administration scope (sudoers) is collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.15"
      @reporting_logic = "weighted"
      {
         file("/etc/audit/audit.rules").content("-w /etc/sudoers -p wa -k scope", "false")
         file("/etc/audit/audit.rules").content("-w /etc/sudoers.d -p wa -k scope", "false")
      }

      @component = "Ensure system administrator actions (sudolog) are collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.16"
      @reporting_logic = "weighted"
      {
        file("/etc/audit/audit.rules").content("-w /var/log/sudo.log -p wa -k actions", "false")
      }

      @component = "Ensure kernel module loading and unloading is collected"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.17"
      @reporting_logic = "weighted"
      {
        if x86_64 =>
        @component = "x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-w /sbin/insmod -p x -k modules", "false")
          file("/etc/audit/audit.rules").content("-w /sbin/rmmod -p x -k modules", "false")
          file("/etc/audit/audit.rules").content("-w /sbin/modprobe -p x -k modules", "false")
          file("/etc/audit/audit.rules").content("-a always,exit arch=b64 -S init_module -S delete_module -k modules", "false")
        }
        if i386|i486|i586|i686 =>
        @component = "non x86"
        @reporting_logic = "weighted"
        {
          file("/etc/audit/audit.rules").content("-w /sbin/insmod -p x -k modules", "false")
          file("/etc/audit/audit.rules").content("-w /sbin/rmmod -p x -k modules", "false")
          file("/etc/audit/audit.rules").content("-w /sbin/modprobe -p x -k modules", "false")
          file("/etc/audit/audit.rules").content("-a always,exit arch=b32 -S init_module -S delete_module -k modules", "false")
        }
      }

      @component = "Ensure the audit configuration is immutable"
      @component = "workstation_2"
      @component = "server_2"
      @component = "4.1.18"
      @reporting_logic = "weighted"
      {
        variable("cis_rhel7", "audit_configuration_is_immutable").string_from_command("""grep '^\s*[^#]' /etc/audit/audit.rules | tail -1""")
        condition("audit_configuration_is_immutable").from_variable_match("cis_rhel7.core_dump_restriction", """-e\s+2""")
        report("Ensure the audit configuration is immutable").if_condition("audit_configuration_is_immutable_true")
      }
    }

    @component = "Configure Logging"
    @reporting_logic = "weighted"
    {
      @component = "Configure rsyslog"
      @reporting_logic = "weighted"
      {
        if rsyslog_present_ok =>
        @component = "Ensure rsyslog Service is enabled"
        @component = "workstation_1"
        @component = "server_1"
        @component = "4.2.1.1"
        @reporting_logic = "weighted"
        {
          service("rsyslog").enabled()
          service("rsyslog").started()
        }

        if rsyslog_present_ok =>
        @component = "Ensure logging is configured"
        @reporting_logic = "weighted"
        {
          # TODO
        }

        if rsyslog_present_ok =>
        @component = "Ensure rsyslog default file permissions configured"
        @component = "workstation_1"
        @component = "server_1"
        @component = "4.2.1.3"
        @reporting_logic = "weighted"
        {
          file("/etc/rsyslog.conf").key_value_present_option("${dollar_char}FileCreateMode", "0640", "${ncf.const}", "strict")
        }

        if rsyslog_present_ok =>
        @component = "Ensure rsyslog is configured to send logs to a remote log host"
        @component = "workstation_1"
        @component = "server_1"
        @component = "4.2.1.4"
        @reporting_logic = "weighted"
        {
          # TODO
        }

        if rsyslog_present_ok =>
        @component = "Ensure remote rsyslog messages are only accepted on designated log hosts"
        @reporting_logic = "weighted"
        {
          file("/etc/rsyslog.conf").key_value_present_option("${dollar_char}ModLoad", "imtcp.so", "${ncf.const}", "strict")
          file("/etc/rsyslog.conf").key_value_present_option("${dollar_char}InputTCPServerRun", "514", "${ncf.const}", "strict")
        }
      }

      @component = "Configure syslog-ng"
      @reporting_logic = "weighted"
      {
        if syslog_ng_present_ok =>
        @component = "Ensure syslog-ng service is enabled"
        @component = "workstation_1"
        @component = "server_1"
        @component = "4.2.2.1"
        @reporting_logic = "weighted"
        {
          service("syslog-ng").enabled()
          service("syslog-ng").started()
        }

        if syslog_ng_present_ok =>
        @component = "Ensure logging is configured"
        @reporting_logic = "weighted"
        {
          # TODO
        }

        if syslog_ng_present_ok =>
        @component = "Ensure syslog-ng default file permissions configured"
        @component = "workstation_1"
        @component = "server_1"
        @component = "4.2.2.3"
        @reporting_logic = "weighted"
        {
          # TODO
        }

        if syslog_ng_present_ok =>
        @component = "Ensure syslog-ng is configured to send logs to a remote log host"
        @reporting_logic = "weighted"
        {
          # TODO
        }

        if syslog_ng_present_ok =>
        @component = "Ensure remote syslog-ng messages are only accepted on designated log hosts"
        @reporting_logic = "weighted"
        {
          # TODO
        }
      }

      @component = "Ensure rsyslog or syslog-ng is installed"
      @component = "workstation_1"
      @component = "server_1"
      @component = "4.2.3"
      @reporting_logic = "weighted"
      {
        report("Ensure rsyslog or syslog-ng is installed").if_condition("syslog_ng_present_ok|rsyslog_present_ok")
      }

      @component = "Ensure permissions on all logfiles are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "4.2.4"
      @reporting_logic = "weighted"
      {
        # TODO
      }
    }

    @component = "Ensure logrotate is configured"
    @reporting_logic = "weighted"
    {
    }
  }

  @component = "Access, Authentication and Authorization"
  @reporting_logic = "weighted"
  {
    @component = "Configure cron"
    @reporting_logic = "weighted"
    {
      service("crond").enabled()
      service("crond").started()
    }

    @component = "Ensure permissions on /etc/crontab are configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.1.2"
    @reporting_logic = "weighted"
    {
      permissions("/etc/crontab").type_recursion("600", "root", "root", "all", "inf")
    }

    @component = "Ensure permissions on /etc/cron.hourly are configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.1.3"
    @reporting_logic = "weighted"
    {
      permissions("/etc/cron.hourly").type_recursion("600", "root", "root", "all", "inf")
    }

    @component = "Ensure permissions on /etc/cron.daily are configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.1.4"
    @reporting_logic = "weighted"
    {
      permissions("/etc/cron.daily").type_recursion("600", "root", "root", "all", "inf")
    }

    @component = "Ensure permissions on /etc/cron.weekly are configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.1.5"
    @reporting_logic = "weighted"
    {
      permissions("/etc/cron.weekly").type_recursion("600", "root", "root", "all", "inf")
    }

    @component = "Ensure permissions on /etc/cron.monthly are configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.1.6"
    @reporting_logic = "weighted"
    {
      permissions("/etc/cron.monthly").type_recursion("600", "root", "root", "all", "inf")
    }

    @component = "Ensure permissions on /etc/cron.d are configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.1.7"
    @reporting_logic = "weighted"
    {
      permissions("/etc/cron.d").type_recursion("700", "root", "root", "all", "inf")
    }

    @component = "Ensure at/cron is restricted to authorized users"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.1.8"
    @reporting_logic = "weighted"
    {
      file("/etc/cron.deny").absent()
      file("/etc/at.deny").absent()
      permissions("/etc/cron.allow").type_recursion("600", "root", "root", "all", "0")
      permissions("/etc/at.allow").type_recursion("600", "root", "root", "all", "0")
    }
  }

  @component = "SSH Server Configuration"
  @reporting_logic = "weighted"
  {
    @component = "Ensure permissions on /etc/ssh/sshd_config are configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.1"
    @reporting_logic = "weighted"
    {
      permissions("/etc/ssh/sshd_config").type_recursion("600", "root", "root", "all", "0")
    }

    @component = "Ensure SSH Protocol is set to 2"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.2"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("Protocol", "2", "${ncf.const}", "strict")
    }

    @component = "Ensure SSH LogLevel is set to INFO"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.3"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("LogLevel", "INFO", "${ncf.const}", "strict")
    }

    @component = "Ensure SSH X11 forwarding is disabled"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.4"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("X11Forwarding", "no", "${ncf.const}", "strict")
    }

    @component = "Ensure SSH MaxAuthTries is set to 4 or less"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.5"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure SSH IgnoreRhosts is enabled"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.6"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("IgnoreRhosts", "yes", "${ncf.const}", "strict")
    }

    @component = "Ensure SSH HostbasedAuthentication is disabled"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.7"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("HostbasedAuthentication", "no", "${ncf.const}", "strict")
    }

    @component = "Ensure SSH HostbasedAuthentication is disabled"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.7"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("PermitRootLogin", "no", "${ncf.const}", "strict")
    }

    @component = "Ensure SSH PermitEmptyPasswords is disabled"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.9"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("PermitEmptyPasswords", "no", "${ncf.const}", "strict")
    }

    @component = "Ensure SSH PermitUserEnvironment is disabled"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.10"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("PermitUserEnvironment", "no", "${ncf.const}", "strict")
    }

    @component = "Ensure only approved ciphers are used"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.11"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd").key_value_parameter_present_in_list("Ciphers", "${ncf.const}", "aes256-ctr", ",", "", "")
      file("/etc/ssh/sshd").key_value_parameter_present_in_list("Ciphers", "${ncf.const}", "aes192-ctr", ",", "", "")
      file("/etc/ssh/sshd").key_value_parameter_present_in_list("Ciphers", "${ncf.const}", "aes128-ctr", ",", "", "")

      file("/etc/ssh/sshd").key_value_parameter_absent_in_list("Ciphers", "${ncf.const}", ".*cbc.*", ",", "", "")
    }

    @component = "Ensure only approved MAC algorithms are used"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.12"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure SSH Idle Timeout Interval is configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.13"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("ClientAliveInterval", "300", "${ncf.const}", "strict")
      file("/etc/ssh/sshd_config").key_value_present_option("ClientAliveCountMax", "0", "${ncf.const}", "strict")
    }

    @component = "Ensure SSH LoginGraceTime is set to one minute or less"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.14"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("LoginGraceTime", "60", "${ncf.const}", "strict")
    }

    @component = "Ensure SSH access is limited"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.15"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure SSH warning banner is configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.2.16"
    @reporting_logic = "weighted"
    {
      file("/etc/ssh/sshd_config").key_value_present_option("Banner", "/etc/issue.net", "${ncf.const}", "strict")
    }
  }

  @component = "Configure PAM"
  @reporting_logic = "weighted"
  {
    @component = "Ensure password creation requirements are configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.3.1"
    @reporting_logic = "weighted"
    {
      file("/etc/pam.d/password-auth").content("password requisite pam_pwquality.so try_first_pass retry=3", "false")
      file("/etc/pam.d/system-auth").content("password requisite pam_pwquality.so try_first_pass retry=3", "false")
      file("/etc/security/pwquality.conf").key_value_present_option("minlen", "14", "=", "strict")
      file("/etc/security/pwquality.conf").key_value_present_option("dcredit", "-1", "=", "strict")
      file("/etc/security/pwquality.conf").key_value_present_option("ucredit", "-1", "=", "strict")
      file("/etc/security/pwquality.conf").key_value_present_option("ocredit", "-1", "=", "strict")
      file("/etc/security/pwquality.conf").key_value_present_option("lcredit", "-1", "=", "strict")
    }

    @component = "Ensure lockout for failed password attempts is configured"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.3.2"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure password reuse is limited"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.3.3"
    @reporting_logic = "weighted"
    {
      file("/etc/pam.d/password-auth").content("password sufficient pam_unix.so remember=5", "false")
      file("/etc/pam.d/system-auth").content("password sufficient pam_unix.so remember=5", "false")
    }

    @component = "Ensure password hashing algorithm is SHA-512"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.3.4"
    @reporting_logic = "weighted"
    {
      file("/etc/pam.d/password-auth").content("password sufficient pam_unix.so sha512", "false")
      file("/etc/pam.d/system-auth").content("password sufficient pam_unix.so sha512", "false")
    }
  }

  @component = "User Accounts and Environment"
  @reporting_logic = "weighted"
  {
    @component = "Set Shadow Password Suite Parameters"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure minimum days between password changes is 7 or more"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.4.1.2"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure password expiration warning days is 7 or more"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.4.1.3"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure inactive password lock is 30 days or less"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.4.1.4"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure system accounts are non-login"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.4.2"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure default group for the root account is GID 0"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.4.3"
    @reporting_logic = "weighted"
    {
      user("root").uid("0")
    }

    @component = "Ensure default user umask is 027 or more restrictive"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.4.4"
    @reporting_logic = "weighted"
    {
      file("/etc/bashrc").key_value_present_option("umask", "027", "${ncf.const}", "strict")
      file("/etc/profile").key_value_present_option("umask", "027", "${ncf.const}", "strict")
    }

    @component = "Ensure root login is restricted to system console"
    @reporting_logic = "weighted"
    {
      # TODO
    }

    @component = "Ensure access to the su command is restricted"
    @component = "workstation_1"
    @component = "server_1"
    @component = "5.6"
    {
      file("/etc/pam.d/su").content("auth required pam_wheel.so use_uid", "false")
      # TODO wheel
    }
  }

  @component = "System Maintenance"
  @reporting_logic = "weighted"
  {
    @component = "System File Permissions"
    @reporting_logic = "weighted"
    {
      @component = "Audit system file permissions"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure permissions on /etc/passwd are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.2"
      @reporting_logic = "weighted"
      {
        permissions("/etc/passwd").type_recursion("644", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/shadow are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.3"
      @reporting_logic = "weighted"
      {
        permissions("/etc/shadow").type_recursion("000", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/group are configured "
      @reporting_logic = "weighted"
      {
        permissions("/etc/group").type_recursion("644", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/gshadow are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.5"
      @reporting_logic = "weighted"
      {
        permissions("/etc/gshadow").type_recursion("600", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/passwd- are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.6"
      @reporting_logic = "weighted"
      {
        permissions("/etc/passwd-").type_recursion("600", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/shadow- are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.7"
      @reporting_logic = "weighted"
      {
        permissions("/etc/shadow-").type_recursion("600", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/group- are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.8"
      @reporting_logic = "weighted"
      {
        permissions("/etc/group-").type_recursion("600", "root", "root", "all", "0")
      }

      @component = "Ensure permissions on /etc/gshadow- are configured"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.9"
      @reporting_logic = "weighted"
      {
        permissions("/etc/gshadow-").type_recursion("600", "root", "root", "all", "0")
      }

      @component = "Ensure no world writable files exist"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.10"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure no unowned files or directories exist"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.11"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure no ungrouped files or directories exist"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.1.12"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Audit SUID executables"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Audit SGID executables"
      @reporting_logic = "weighted"
      {
        # TODO
      }
    }

    @component = "User and Group Settings"
    @reporting_logic = "weighted"
    {
      @component = "Ensure password fields are not empty"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.1"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = """Ensure no legacy "+" entries exist in /etc/passwd"""
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = """Ensure no legacy "+" entries exist in /etc/shadow"""
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = """Ensure no legacy "+" entries exist in /etc/group"""
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure root is the only UID 0 account"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.5"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure root PATH Integrity"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.6"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure all users' home directories exist"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.7"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure users' home directories permissions are 750 or more restrictive"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.8"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure users own their home directories"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.9"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure users' dot files are not group or world writable"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.10"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure no users have .forward files"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.11"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure no users have .netrc files"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.12"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure users' .netrc Files are not group or world accessible"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.13"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure no users have .rhosts files"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.14"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure all groups in /etc/passwd exist in /etc/group "
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure no duplicate UIDs exist"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.16"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure no duplicate GIDs exist"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.17"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure no duplicate user names exist"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.18"
      @reporting_logic = "weighted"
      {
        # TODO
      }

      @component = "Ensure no duplicate group names exist"
      @component = "workstation_1"
      @component = "server_1"
      @component = "6.2.19"
      @reporting_logic = "weighted"
      {
        # TODO
      }
    }
  }
}
